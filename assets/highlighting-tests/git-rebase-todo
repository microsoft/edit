pick 3f9d2ab # chore(ci): add initial pipeline
pick e12c0ff # feat(io): introduce streaming reader
reword 7ac14d0 feat(io): add zero-copy buffered writer
edit 4d92b67 fix(io): handle partial UTF-8 sequences at buffer boundary
pick 8bb3a21 docs: expand README performance section
squash 1c02f55 docs: tidy wording in performance section
pick 54ae91b feat(cli): add --color=auto detection
fixup 0b77c3e feat(cli): typo in help text
fixup -c 2f4e8ab feat(cli): adjust arg parsing error message
pick 6d8e5f1 refactor(core): split large module into submodules
break
pick a41e9d3 test(core): add regression tests for issue #410
exec cargo test --package edit --lib --quiet
pick c3bb921 perf(render): SIMD accelerate line diffing
drop 91d0f2e debug(render): temporary logging (to be dropped)
label pre-merge-split
pick d2f7ac4 feat(ui): add mouse wheel smooth scrolling
pick f1a4bd9 feat(ui): add high-DPI awareness
label post-ui
update-ref refs/heads/feature/ui-stack-post
reset pre-merge-split
merge -C 5ab77e3 post-ui # Merge UI feature stack
pick d8c4b91 build: bump version to 0.9.0

# Rebase 3f9d2ab..d8c4b91 onto d8c4b91 (18 commands)
#
# Commands:
# p, pick <commit> = use commit
# r, reword <commit> = use commit, but edit the commit message
# e, edit <commit> = use commit, but stop for amending
# s, squash <commit> = use commit, but meld into previous commit
# f, fixup [-C | -c] <commit> = like "squash" but keep only the previous
#                    commit's log message, unless -C is used, in which case
#                    keep only this commit's message; -c is same as -C but
#                    opens the editor
# x, exec <command> = run command (the rest of the line) using shell
# b, break = stop here (continue rebase later with 'git rebase --continue')
# d, drop <commit> = remove commit
# l, label <label> = label current HEAD with a name
# t, reset <label> = reset HEAD to a label
# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]
#         create a merge commit using the original merge commit's
#         message (or the oneline, if no original merge commit was
#         specified); use -c <commit> to reword the commit message
# u, update-ref <ref> = track a placeholder for the <ref> to be updated
#                       to this position in the new commits. The <ref> is
#                       updated at the end of the rebase
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
