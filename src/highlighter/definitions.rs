// This file is auto-generated by the highlighter-gen tool.
// Do not edit this file directly.

use std::ops::RangeInclusive;

use Action::*;
use Consume::*;
use HighlightKind::*;

pub struct Language {
    pub name: &'static str,
    pub extensions: &'static [&'static str],
    pub states: &'static [&'static [Transition<'static>]],
}

pub type Transition<'a> = (Consume<'a>, Option<HighlightKind>, Action);

pub enum Consume<'a> {
    Chars(usize),
    Charset(&'a [u8; 256]),
    Prefix(&'a str),
    PrefixInsensitive(&'a str),
}

#[derive(Debug, Default, Clone, Copy, PartialEq, Eq)]
pub enum HighlightKind {
    #[default]
    Other,
    Comment,
    Number,
    String,
    Variable,
    Operator,
    Keyword,
    Method,
}

pub enum Action {
    Change(u8),
    Push(u8),
    Pop,
}

/**
---
config:
  layout: elk
---
flowchart TD
    0["ground"]
    1["comment"]
    2["string"]
    3["string_escape"]
    0 -->|"Prefix(//)<br/>Some(Comment)"| 4
    4 -->|"Chars(Line)<br/>Some(Comment)"| pop262144@{ shape: stop }
    0 -->|"Prefix(/*)<br/>Some(Comment)"| push1[/"comment"/]
    0 -->|"Prefix(&quot;)<br/>Some(String)"| push2[/"string"/]
    0 -->|"Prefix(-)<br/>Some(Other)"| 6
    6 -->|"Charset([0-9])<br/>Some(Other)"| 5
    5 -->|"Prefix(.)<br/>Some(Other)"| 8
    8 -->|"Charset([0-9])<br/>Some(Other)"| 7
    7 -->|"PrefixInsensitive(e)<br/>Some(Other)"| 10
    10 -->|"Prefix(+, -)<br/>Some(Other)"| 11
    11 -->|"Charset([0-9])<br/>Some(Other)"| 9
    9 -->|"Charset([0-9, A-Z, _, a-z, 0x80-0xFF])<br/>Some(Other)"| pop589824@{ shape: stop }
    9 -->|"Chars(0)<br/>Some(Number)"| pop589824@{ shape: stop }
    11 -->|"Chars(0)<br/>Some(Other)"| pop720896@{ shape: stop }
    10 -->|"Chars(0)<br/>None"| 11
    7 -->|"Chars(0)<br/>None"| 9
    8 -->|"Chars(0)<br/>Some(Other)"| pop524288@{ shape: stop }
    5 -->|"Chars(0)<br/>None"| 7
    6 -->|"Chars(0)<br/>Some(Other)"| pop393216@{ shape: stop }
    0 -->|"Charset([0-9])<br/>Some(Other)"| 5
    0 -->|"Prefix(true, false, null)<br/>Some(Other)"| 12
    12 -->|"Charset([0-9, A-Z, _, a-z, 0x80-0xFF])<br/>Some(Other)"| pop786432@{ shape: stop }
    12 -->|"Chars(0)<br/>Some(Keyword)"| pop786432@{ shape: stop }
    0 -->|"Charset([0x00-!, #-,, ., :-e, g-m, o-s, u-0xFF])<br/>None"| pop0@{ shape: stop }
    0 -->|"Chars(1)<br/>None"| pop0@{ shape: stop }
    1 -->|"Prefix(*/)<br/>Some(Comment)"| pop65536@{ shape: stop }
    1 -->|"Charset([0x00-), +-0xFF])<br/>None"| 1
    1 -->|"Chars(1)<br/>None"| 1
    2 -->|"Prefix(\\)<br/>Some(String)"| push131075[/"string_escape"/]
    2 -->|"Prefix(&quot;)<br/>Some(String)"| pop131072@{ shape: stop }
    2 -->|"Charset([0x00-!, #-[, ]-0xFF])<br/>None"| 2
    2 -->|"Chars(1)<br/>None"| 2
    3 -->|"Chars(1)<br/>Some(String)"| pop196608@{ shape: stop }
**/
#[rustfmt::skip]
const LANG_JSON_CHARSET_0: &[u8; 256] = &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
#[rustfmt::skip]
const LANG_JSON_CHARSET_1: &[u8; 256] = &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
#[rustfmt::skip]
const LANG_JSON_CHARSET_2: &[u8; 256] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
#[rustfmt::skip]
const LANG_JSON_CHARSET_3: &[u8; 256] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
#[rustfmt::skip]
const LANG_JSON_CHARSET_4: &[u8; 256] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
#[rustfmt::skip]
pub const LANG_JSON: &Language = &Language {
    name: "JSON",
    extensions: &["json", "jsonc"],
    states: &[
        &[
            (Prefix(r#"//"#), Some(Comment), Change(4)),
            (Prefix(r#"/*"#), Some(Comment), Push(1)),
            (Prefix(r#"""#), Some(String), Push(2)),
            (Prefix(r#"-"#), Some(Other), Change(6)),
            (Charset(LANG_JSON_CHARSET_0), Some(Other), Change(5)),
            (Prefix(r#"true"#), Some(Other), Change(12)),
            (Prefix(r#"false"#), Some(Other), Change(12)),
            (Prefix(r#"null"#), Some(Other), Change(12)),
            (Charset(LANG_JSON_CHARSET_2), None, Pop),
            (Chars(1), None, Pop),
        ],
        &[
            (Prefix(r#"*/"#), Some(Comment), Pop),
            (Charset(LANG_JSON_CHARSET_3), None, Change(1)),
            (Chars(1), None, Change(1)),
        ],
        &[
            (Prefix(r#"\"#), Some(String), Push(3)),
            (Prefix(r#"""#), Some(String), Pop),
            (Charset(LANG_JSON_CHARSET_4), None, Change(2)),
            (Chars(1), None, Change(2)),
        ],
        &[
            (Chars(1), Some(String), Pop),
        ],
        &[
            (Chars(usize::MAX), Some(Comment), Pop),
        ],
        &[
            (Prefix(r#"."#), Some(Other), Change(8)),
            (Chars(0), None, Change(7)),
        ],
        &[
            (Charset(LANG_JSON_CHARSET_0), Some(Other), Change(5)),
            (Chars(0), Some(Other), Pop),
        ],
        &[
            (PrefixInsensitive(r#"e"#), Some(Other), Change(10)),
            (Chars(0), None, Change(9)),
        ],
        &[
            (Charset(LANG_JSON_CHARSET_0), Some(Other), Change(7)),
            (Chars(0), Some(Other), Pop),
        ],
        &[
            (Charset(LANG_JSON_CHARSET_1), Some(Other), Pop),
            (Chars(0), Some(Number), Pop),
        ],
        &[
            (Prefix(r#"+"#), Some(Other), Change(11)),
            (Prefix(r#"-"#), Some(Other), Change(11)),
            (Chars(0), None, Change(11)),
        ],
        &[
            (Charset(LANG_JSON_CHARSET_0), Some(Other), Change(9)),
            (Chars(0), Some(Other), Pop),
        ],
        &[
            (Charset(LANG_JSON_CHARSET_1), Some(Other), Pop),
            (Chars(0), Some(Keyword), Pop),
        ],
    ],
};

/**
---
config:
  layout: elk
---
flowchart TD
    0["ground"]
    1["string_double"]
    2["string_single"]
    3["string_escape"]
    4["string_resolve"]
    5["string_resolve_change"]
    0 -->|"Prefix(#)<br/>Some(Comment)"| 6
    6 -->|"Chars(Line)<br/>Some(Comment)"| pop393216@{ shape: stop }
    0 -->|"Prefix(&quot;)<br/>Some(String)"| push1[/"string_double"/]
    0 -->|"Prefix(')<br/>Some(String)"| push2[/"string_single"/]
    0 -->|"Prefix(-)<br/>Some(Number)"| 8
    8 -->|"Charset([0-9])<br/>Some(Number)"| 7
    7 -->|"Prefix(.)<br/>Some(Number)"| 10
    10 -->|"Charset([0-9])<br/>Some(Number)"| 9
    9 -->|"PrefixInsensitive(e)<br/>Some(Number)"| 11
    11 -->|"Prefix(+, -)<br/>Some(Number)"| 12
    12 -->|"Charset([0-9])<br/>Some(Number)"| 4
    4 -->|"Charset([0x09-0x0D,  ])<br/>None"| 13
    13 -->|"Charset([0x00-0x08, 0x0E-0x1F, !-0xFF])<br/>None"| 5
    5 -->|"Charset([0x00-&quot;, $-0xFF])<br/>Some(String)"| pop327680@{ shape: stop }
    5 -->|"Chars(0)<br/>None"| pop327680@{ shape: stop }
    13 -->|"Chars(0)<br/>None"| pop851968@{ shape: stop }
    4 -->|"Chars(0)<br/>None"| 13
    12 -->|"Chars(0)<br/>Some(Other)"| pop786432@{ shape: stop }
    11 -->|"Chars(0)<br/>None"| 12
    9 -->|"Chars(0)<br/>None"| 4
    10 -->|"Chars(0)<br/>Some(Other)"| pop655360@{ shape: stop }
    7 -->|"Chars(0)<br/>None"| 9
    8 -->|"Chars(0)<br/>Some(Other)"| pop524288@{ shape: stop }
    0 -->|"Charset([0-9])<br/>Some(Number)"| 7
    0 -->|"Prefix(true, false, null)<br/>Some(Keyword)"| 4
    0 -->|"Charset([0x00-!, $-&, (-,, .-/, :-e, g-m, o-s, u-0xFF])<br/>None"| pop0@{ shape: stop }
    0 -->|"Chars(1)<br/>None"| pop0@{ shape: stop }
    1 -->|"Prefix(&quot;)<br/>Some(String)"| pop65536@{ shape: stop }
    1 -->|"Prefix(\\)<br/>Some(String)"| push65539[/"string_escape"/]
    1 -->|"Charset([0x00-!, #-[, ]-0xFF])<br/>None"| 1
    1 -->|"Chars(1)<br/>None"| 1
    2 -->|"Prefix(')<br/>Some(String)"| pop131072@{ shape: stop }
    2 -->|"Prefix(\\)<br/>Some(String)"| push131075[/"string_escape"/]
    2 -->|"Charset([0x00-&, (-[, ]-0xFF])<br/>None"| 2
    2 -->|"Chars(1)<br/>None"| 2
    3 -->|"Chars(1)<br/>Some(String)"| pop196608@{ shape: stop }
**/
#[rustfmt::skip]
const LANG_YAML_CHARSET_0: &[u8; 256] = &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
#[rustfmt::skip]
const LANG_YAML_CHARSET_1: &[u8; 256] = &[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
#[rustfmt::skip]
const LANG_YAML_CHARSET_2: &[u8; 256] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
#[rustfmt::skip]
const LANG_YAML_CHARSET_3: &[u8; 256] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
#[rustfmt::skip]
const LANG_YAML_CHARSET_4: &[u8; 256] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
#[rustfmt::skip]
const LANG_YAML_CHARSET_5: &[u8; 256] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
#[rustfmt::skip]
const LANG_YAML_CHARSET_6: &[u8; 256] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
#[rustfmt::skip]
pub const LANG_YAML: &Language = &Language {
    name: "YAML",
    extensions: &["yaml", "yml"],
    states: &[
        &[
            (Prefix(r#"#"#), Some(Comment), Change(6)),
            (Prefix(r#"""#), Some(String), Push(1)),
            (Prefix(r#"'"#), Some(String), Push(2)),
            (Prefix(r#"-"#), Some(Number), Change(8)),
            (Charset(LANG_YAML_CHARSET_0), Some(Number), Change(7)),
            (Prefix(r#"true"#), Some(Keyword), Change(4)),
            (Prefix(r#"false"#), Some(Keyword), Change(4)),
            (Prefix(r#"null"#), Some(Keyword), Change(4)),
            (Charset(LANG_YAML_CHARSET_4), None, Pop),
            (Chars(1), None, Pop),
        ],
        &[
            (Prefix(r#"""#), Some(String), Pop),
            (Prefix(r#"\"#), Some(String), Push(3)),
            (Charset(LANG_YAML_CHARSET_5), None, Change(1)),
            (Chars(1), None, Change(1)),
        ],
        &[
            (Prefix(r#"'"#), Some(String), Pop),
            (Prefix(r#"\"#), Some(String), Push(3)),
            (Charset(LANG_YAML_CHARSET_6), None, Change(2)),
            (Chars(1), None, Change(2)),
        ],
        &[
            (Chars(1), Some(String), Pop),
        ],
        &[
            (Charset(LANG_YAML_CHARSET_1), None, Change(13)),
            (Chars(0), None, Change(13)),
        ],
        &[
            (Charset(LANG_YAML_CHARSET_3), Some(String), Pop),
            (Chars(0), None, Pop),
        ],
        &[
            (Chars(usize::MAX), Some(Comment), Pop),
        ],
        &[
            (Prefix(r#"."#), Some(Number), Change(10)),
            (Chars(0), None, Change(9)),
        ],
        &[
            (Charset(LANG_YAML_CHARSET_0), Some(Number), Change(7)),
            (Chars(0), Some(Other), Pop),
        ],
        &[
            (PrefixInsensitive(r#"e"#), Some(Number), Change(11)),
            (Chars(0), None, Change(4)),
        ],
        &[
            (Charset(LANG_YAML_CHARSET_0), Some(Number), Change(9)),
            (Chars(0), Some(Other), Pop),
        ],
        &[
            (Prefix(r#"+"#), Some(Number), Change(12)),
            (Prefix(r#"-"#), Some(Number), Change(12)),
            (Chars(0), None, Change(12)),
        ],
        &[
            (Charset(LANG_YAML_CHARSET_0), Some(Number), Change(4)),
            (Chars(0), Some(Other), Pop),
        ],
        &[
            (Charset(LANG_YAML_CHARSET_2), None, Change(5)),
            (Chars(0), None, Pop),
        ],
    ],
};

/**
---
config:
  layout: elk
---
flowchart TD
    0["ground"]
    1["string_single"]
    2["string_double"]
    3["string_escape"]
    4["variable"]
    0 -->|"Prefix(#)<br/>Some(Comment)"| 5
    5 -->|"Chars(Line)<br/>Some(Comment)"| pop327680@{ shape: stop }
    0 -->|"Prefix(')<br/>Some(String)"| push1[/"string_single"/]
    0 -->|"Prefix(&quot;)<br/>Some(String)"| push2[/"string_double"/]
    0 -->|"Prefix($)<br/>Some(Variable)"| push4[/"variable"/]
    0 -->|"Prefix(!, %, *, +, /, <, =, >, |)<br/>Some(Operator)"| pop0@{ shape: stop }
    0 -->|"PrefixInsensitive(break, case, continue, done, do, elif, else, esac, fi, for, function, if, in, return, select, then, until, while)<br/>Some(Keyword)"| pop0@{ shape: stop }
    0 -->|"Charset([0-9])<br/>Some(Number)"| pop0@{ shape: stop }
    0 -->|"Charset([0-9, A-Z, _, a-z, 0x80-0xFF])<br/>Some(Method)"| pop0@{ shape: stop }
    0 -->|"Charset([0x00- , &, (-), ,-., :-;, ?-@, [-^, `, {, }-0x7F])<br/>None"| pop0@{ shape: stop }
    0 -->|"Chars(1)<br/>None"| pop0@{ shape: stop }
    1 -->|"Prefix(')<br/>Some(String)"| pop65536@{ shape: stop }
    1 -->|"Prefix(\\)<br/>Some(String)"| push65539[/"string_escape"/]
    1 -->|"Charset([0x00-&, (-[, ]-0xFF])<br/>None"| 1
    1 -->|"Chars(1)<br/>None"| 1
    2 -->|"Prefix(&quot;)<br/>Some(String)"| pop131072@{ shape: stop }
    2 -->|"Prefix(\\)<br/>Some(String)"| push131075[/"string_escape"/]
    2 -->|"Prefix($)<br/>Some(Other)"| push131076[/"variable"/]
    2 -->|"Charset([0x00-!, #, %-[, ]-0xFF])<br/>None"| 2
    2 -->|"Chars(1)<br/>None"| 2
    3 -->|"Chars(1)<br/>Some(String)"| pop196608@{ shape: stop }
    4 -->|"Prefix(#, ?)<br/>Some(Variable)"| pop262144@{ shape: stop }
    4 -->|"Prefix({)<br/>Some(Variable)"| 6
    6 -->|"Charset([0x00-|, ~-0xFF])<br/>Some(Variable)"| 7
    7 -->|"Prefix(})<br/>Some(Variable)"| pop458752@{ shape: stop }
    7 -->|"Chars(0)<br/>Some(Other)"| pop458752@{ shape: stop }
    6 -->|"Chars(0)<br/>None"| 7
    4 -->|"Charset([0-9, A-Z, _, a-z, 0x80-0xFF])<br/>Some(Variable)"| pop262144@{ shape: stop }
    4 -->|"Charset([0x00-&quot;, $-/, :->, @, [-^, `, |-0x7F])<br/>None"| 4
    4 -->|"Chars(1)<br/>None"| 4
**/
#[rustfmt::skip]
const LANG_BASH_CHARSET_0: &[u8; 256] = &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
#[rustfmt::skip]
const LANG_BASH_CHARSET_1: &[u8; 256] = &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
#[rustfmt::skip]
const LANG_BASH_CHARSET_2: &[u8; 256] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
#[rustfmt::skip]
const LANG_BASH_CHARSET_3: &[u8; 256] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
#[rustfmt::skip]
const LANG_BASH_CHARSET_4: &[u8; 256] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
#[rustfmt::skip]
const LANG_BASH_CHARSET_5: &[u8; 256] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
#[rustfmt::skip]
const LANG_BASH_CHARSET_6: &[u8; 256] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
#[rustfmt::skip]
pub const LANG_BASH: &Language = &Language {
    name: "Bash",
    extensions: &["sh", "zsh"],
    states: &[
        &[
            (Prefix(r#"#"#), Some(Comment), Change(5)),
            (Prefix(r#"'"#), Some(String), Push(1)),
            (Prefix(r#"""#), Some(String), Push(2)),
            (Prefix(r#"$"#), Some(Variable), Push(4)),
            (Prefix(r#"!"#), Some(Operator), Pop),
            (Prefix(r#"%"#), Some(Operator), Pop),
            (Prefix(r#"*"#), Some(Operator), Pop),
            (Prefix(r#"+"#), Some(Operator), Pop),
            (Prefix(r#"/"#), Some(Operator), Pop),
            (Prefix(r#"<"#), Some(Operator), Pop),
            (Prefix(r#"="#), Some(Operator), Pop),
            (Prefix(r#">"#), Some(Operator), Pop),
            (Prefix(r#"|"#), Some(Operator), Pop),
            (PrefixInsensitive(r#"break"#), Some(Keyword), Pop),
            (PrefixInsensitive(r#"case"#), Some(Keyword), Pop),
            (PrefixInsensitive(r#"continue"#), Some(Keyword), Pop),
            (PrefixInsensitive(r#"done"#), Some(Keyword), Pop),
            (PrefixInsensitive(r#"do"#), Some(Keyword), Pop),
            (PrefixInsensitive(r#"elif"#), Some(Keyword), Pop),
            (PrefixInsensitive(r#"else"#), Some(Keyword), Pop),
            (PrefixInsensitive(r#"esac"#), Some(Keyword), Pop),
            (PrefixInsensitive(r#"fi"#), Some(Keyword), Pop),
            (PrefixInsensitive(r#"for"#), Some(Keyword), Pop),
            (PrefixInsensitive(r#"function"#), Some(Keyword), Pop),
            (PrefixInsensitive(r#"if"#), Some(Keyword), Pop),
            (PrefixInsensitive(r#"in"#), Some(Keyword), Pop),
            (PrefixInsensitive(r#"return"#), Some(Keyword), Pop),
            (PrefixInsensitive(r#"select"#), Some(Keyword), Pop),
            (PrefixInsensitive(r#"then"#), Some(Keyword), Pop),
            (PrefixInsensitive(r#"until"#), Some(Keyword), Pop),
            (PrefixInsensitive(r#"while"#), Some(Keyword), Pop),
            (Charset(LANG_BASH_CHARSET_0), Some(Number), Pop),
            (Charset(LANG_BASH_CHARSET_1), Some(Method), Pop),
            (Charset(LANG_BASH_CHARSET_3), None, Pop),
            (Chars(1), None, Pop),
        ],
        &[
            (Prefix(r#"'"#), Some(String), Pop),
            (Prefix(r#"\"#), Some(String), Push(3)),
            (Charset(LANG_BASH_CHARSET_4), None, Change(1)),
            (Chars(1), None, Change(1)),
        ],
        &[
            (Prefix(r#"""#), Some(String), Pop),
            (Prefix(r#"\"#), Some(String), Push(3)),
            (Prefix(r#"$"#), Some(Other), Push(4)),
            (Charset(LANG_BASH_CHARSET_5), None, Change(2)),
            (Chars(1), None, Change(2)),
        ],
        &[
            (Chars(1), Some(String), Pop),
        ],
        &[
            (Prefix(r#"#"#), Some(Variable), Pop),
            (Prefix(r#"?"#), Some(Variable), Pop),
            (Prefix(r#"{"#), Some(Variable), Change(6)),
            (Charset(LANG_BASH_CHARSET_1), Some(Variable), Pop),
            (Charset(LANG_BASH_CHARSET_6), None, Change(4)),
            (Chars(1), None, Change(4)),
        ],
        &[
            (Chars(usize::MAX), Some(Comment), Pop),
        ],
        &[
            (Charset(LANG_BASH_CHARSET_2), Some(Variable), Change(7)),
            (Chars(0), None, Change(7)),
        ],
        &[
            (Prefix(r#"}"#), Some(Variable), Pop),
            (Chars(0), Some(Other), Pop),
        ],
    ],
};

/**
---
config:
  layout: elk
---
flowchart TD
    0["ground"]
    1["comment"]
    2["string_single"]
    3["string_double"]
    4["string_escape"]
    5["variable"]
    0 -->|"Prefix(#)<br/>Some(Comment)"| 6
    6 -->|"Chars(Line)<br/>Some(Comment)"| pop393216@{ shape: stop }
    0 -->|"Prefix(<#)<br/>Some(Comment)"| push1[/"comment"/]
    0 -->|"Prefix(')<br/>Some(String)"| push2[/"string_single"/]
    0 -->|"Prefix(&quot;)<br/>Some(String)"| push3[/"string_double"/]
    0 -->|"Prefix($)<br/>Some(Variable)"| push5[/"variable"/]
    0 -->|"Prefix(-)<br/>Some(Number)"| 8
    8 -->|"Charset([0-9])<br/>Some(Number)"| 7
    7 -->|"Prefix(.)<br/>Some(Number)"| 10
    10 -->|"Charset([0-9])<br/>Some(Number)"| 9
    9 -->|"PrefixInsensitive(e)<br/>Some(Number)"| 11
    11 -->|"Prefix(+, -)<br/>Some(Number)"| 12
    12 -->|"Charset([0-9])<br/>Some(Number)"| pop786432@{ shape: stop }
    12 -->|"Chars(0)<br/>Some(Other)"| pop786432@{ shape: stop }
    11 -->|"Chars(0)<br/>None"| 12
    9 -->|"Chars(0)<br/>None"| pop589824@{ shape: stop }
    10 -->|"Chars(0)<br/>Some(Other)"| pop655360@{ shape: stop }
    7 -->|"Chars(0)<br/>None"| 9
    8 -->|"Charset([0-9, A-Z, _, a-z, 0x80-0xFF])<br/>Some(Operator)"| pop524288@{ shape: stop }
    8 -->|"Chars(0)<br/>Some(Other)"| pop524288@{ shape: stop }
    0 -->|"Charset([0-9])<br/>Some(Number)"| 7
    0 -->|"Prefix(!, %, *, +, /, <, =, >, |)<br/>Some(Operator)"| pop0@{ shape: stop }
    0 -->|"PrefixInsensitive(break, catch, continue, do, elseif, else, finally, foreach, function, if, return, switch, throw, try, using, while)<br/>Some(Method)"| 13
    13 -->|"Charset([-, 0-9, A-Z, _, a-z, 0x80-0xFF])<br/>Some(Method)"| pop851968@{ shape: stop }
    13 -->|"Chars(0)<br/>Some(Keyword)"| pop851968@{ shape: stop }
    0 -->|"Charset([-, 0-9, A-Z, _, a-z, 0x80-0xFF])<br/>Some(Method)"| pop0@{ shape: stop }
    0 -->|"Charset([0x00- , &, (-), ,, ., :-;, ?-@, [-^, `, {, }-0x7F])<br/>None"| pop0@{ shape: stop }
    0 -->|"Chars(1)<br/>None"| pop0@{ shape: stop }
    1 -->|"Prefix(#>)<br/>Some(Comment)"| pop65536@{ shape: stop }
    1 -->|"Charset([0x00-&quot;, $-0xFF])<br/>None"| 1
    1 -->|"Chars(1)<br/>None"| 1
    2 -->|"Prefix(')<br/>Some(String)"| pop131072@{ shape: stop }
    2 -->|"Prefix(`)<br/>Some(String)"| push131076[/"string_escape"/]
    2 -->|"Charset([0x00-&, (-_, a-0xFF])<br/>None"| 2
    2 -->|"Chars(1)<br/>None"| 2
    3 -->|"Prefix(&quot;)<br/>Some(String)"| pop196608@{ shape: stop }
    3 -->|"Prefix(`)<br/>Some(String)"| push196612[/"string_escape"/]
    3 -->|"Prefix($)<br/>Some(Other)"| push196613[/"variable"/]
    3 -->|"Charset([0x00-!, #, %-_, a-0xFF])<br/>None"| 3
    3 -->|"Chars(1)<br/>None"| 3
    4 -->|"Chars(1)<br/>Some(String)"| pop262144@{ shape: stop }
    5 -->|"Prefix((, $, ?, ^)<br/>Some(Other)"| pop327680@{ shape: stop }
    5 -->|"Prefix({)<br/>Some(Variable)"| 14
    14 -->|"Charset([0x00-|, ~-0xFF])<br/>Some(Variable)"| 15
    15 -->|"Prefix(})<br/>Some(Variable)"| pop983040@{ shape: stop }
    15 -->|"Chars(0)<br/>Some(Other)"| pop983040@{ shape: stop }
    14 -->|"Chars(0)<br/>None"| 15
    5 -->|"Charset([0-9, A-Z, _, a-z, 0x80-0xFF])<br/>Some(Variable)"| pop327680@{ shape: stop }
    5 -->|"Charset([0x00-#, %-', )-/, :->, @, [-], `, |-0x7F])<br/>None"| 5
    5 -->|"Chars(1)<br/>None"| 5
**/
#[rustfmt::skip]
const LANG_POWERSHELL_CHARSET_0: &[u8; 256] = &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
#[rustfmt::skip]
const LANG_POWERSHELL_CHARSET_1: &[u8; 256] = &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
#[rustfmt::skip]
const LANG_POWERSHELL_CHARSET_2: &[u8; 256] = &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
#[rustfmt::skip]
const LANG_POWERSHELL_CHARSET_3: &[u8; 256] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
#[rustfmt::skip]
const LANG_POWERSHELL_CHARSET_4: &[u8; 256] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
#[rustfmt::skip]
const LANG_POWERSHELL_CHARSET_5: &[u8; 256] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
#[rustfmt::skip]
const LANG_POWERSHELL_CHARSET_6: &[u8; 256] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
#[rustfmt::skip]
const LANG_POWERSHELL_CHARSET_7: &[u8; 256] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
#[rustfmt::skip]
const LANG_POWERSHELL_CHARSET_8: &[u8; 256] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
#[rustfmt::skip]
pub const LANG_POWERSHELL: &Language = &Language {
    name: "PowerShell",
    extensions: &["ps1", "psm1", "psd1"],
    states: &[
        &[
            (Prefix(r#"#"#), Some(Comment), Change(6)),
            (Prefix(r#"<#"#), Some(Comment), Push(1)),
            (Prefix(r#"'"#), Some(String), Push(2)),
            (Prefix(r#"""#), Some(String), Push(3)),
            (Prefix(r#"$"#), Some(Variable), Push(5)),
            (Prefix(r#"-"#), Some(Number), Change(8)),
            (Charset(LANG_POWERSHELL_CHARSET_0), Some(Number), Change(7)),
            (Prefix(r#"!"#), Some(Operator), Pop),
            (Prefix(r#"%"#), Some(Operator), Pop),
            (Prefix(r#"*"#), Some(Operator), Pop),
            (Prefix(r#"+"#), Some(Operator), Pop),
            (Prefix(r#"/"#), Some(Operator), Pop),
            (Prefix(r#"<"#), Some(Operator), Pop),
            (Prefix(r#"="#), Some(Operator), Pop),
            (Prefix(r#">"#), Some(Operator), Pop),
            (Prefix(r#"|"#), Some(Operator), Pop),
            (PrefixInsensitive(r#"break"#), Some(Method), Change(13)),
            (PrefixInsensitive(r#"catch"#), Some(Method), Change(13)),
            (PrefixInsensitive(r#"continue"#), Some(Method), Change(13)),
            (PrefixInsensitive(r#"do"#), Some(Method), Change(13)),
            (PrefixInsensitive(r#"elseif"#), Some(Method), Change(13)),
            (PrefixInsensitive(r#"else"#), Some(Method), Change(13)),
            (PrefixInsensitive(r#"finally"#), Some(Method), Change(13)),
            (PrefixInsensitive(r#"foreach"#), Some(Method), Change(13)),
            (PrefixInsensitive(r#"function"#), Some(Method), Change(13)),
            (PrefixInsensitive(r#"if"#), Some(Method), Change(13)),
            (PrefixInsensitive(r#"return"#), Some(Method), Change(13)),
            (PrefixInsensitive(r#"switch"#), Some(Method), Change(13)),
            (PrefixInsensitive(r#"throw"#), Some(Method), Change(13)),
            (PrefixInsensitive(r#"try"#), Some(Method), Change(13)),
            (PrefixInsensitive(r#"using"#), Some(Method), Change(13)),
            (PrefixInsensitive(r#"while"#), Some(Method), Change(13)),
            (Charset(LANG_POWERSHELL_CHARSET_2), Some(Method), Pop),
            (Charset(LANG_POWERSHELL_CHARSET_4), None, Pop),
            (Chars(1), None, Pop),
        ],
        &[
            (Prefix(r#"#>"#), Some(Comment), Pop),
            (Charset(LANG_POWERSHELL_CHARSET_5), None, Change(1)),
            (Chars(1), None, Change(1)),
        ],
        &[
            (Prefix(r#"'"#), Some(String), Pop),
            (Prefix(r#"`"#), Some(String), Push(4)),
            (Charset(LANG_POWERSHELL_CHARSET_6), None, Change(2)),
            (Chars(1), None, Change(2)),
        ],
        &[
            (Prefix(r#"""#), Some(String), Pop),
            (Prefix(r#"`"#), Some(String), Push(4)),
            (Prefix(r#"$"#), Some(Other), Push(5)),
            (Charset(LANG_POWERSHELL_CHARSET_7), None, Change(3)),
            (Chars(1), None, Change(3)),
        ],
        &[
            (Chars(1), Some(String), Pop),
        ],
        &[
            (Prefix(r#"("#), Some(Other), Pop),
            (Prefix(r#"$"#), Some(Variable), Pop),
            (Prefix(r#"?"#), Some(Variable), Pop),
            (Prefix(r#"^"#), Some(Variable), Pop),
            (Prefix(r#"{"#), Some(Variable), Change(14)),
            (Charset(LANG_POWERSHELL_CHARSET_1), Some(Variable), Pop),
            (Charset(LANG_POWERSHELL_CHARSET_8), None, Change(5)),
            (Chars(1), None, Change(5)),
        ],
        &[
            (Chars(usize::MAX), Some(Comment), Pop),
        ],
        &[
            (Prefix(r#"."#), Some(Number), Change(10)),
            (Chars(0), None, Change(9)),
        ],
        &[
            (Charset(LANG_POWERSHELL_CHARSET_0), Some(Number), Change(7)),
            (Charset(LANG_POWERSHELL_CHARSET_1), Some(Operator), Pop),
            (Chars(0), Some(Other), Pop),
        ],
        &[
            (PrefixInsensitive(r#"e"#), Some(Number), Change(11)),
            (Chars(0), None, Pop),
        ],
        &[
            (Charset(LANG_POWERSHELL_CHARSET_0), Some(Number), Change(9)),
            (Chars(0), Some(Other), Pop),
        ],
        &[
            (Prefix(r#"+"#), Some(Number), Change(12)),
            (Prefix(r#"-"#), Some(Number), Change(12)),
            (Chars(0), None, Change(12)),
        ],
        &[
            (Charset(LANG_POWERSHELL_CHARSET_0), Some(Number), Pop),
            (Chars(0), Some(Other), Pop),
        ],
        &[
            (Charset(LANG_POWERSHELL_CHARSET_2), Some(Method), Pop),
            (Chars(0), Some(Keyword), Pop),
        ],
        &[
            (Charset(LANG_POWERSHELL_CHARSET_3), Some(Variable), Change(15)),
            (Chars(0), None, Change(15)),
        ],
        &[
            (Prefix(r#"}"#), Some(Variable), Pop),
            (Chars(0), Some(Other), Pop),
        ],
    ],
};

/**
---
config:
  layout: elk
---
flowchart TD
    0["ground"]
    1["string"]
    2["string_escape"]
    3["variable"]
    0 -->|"PrefixInsensitive(rem)<br/>Some(Other)"| 4
    4 -->|"Charset([0x00-0x08, 0x0E-0x1F, !-0xFF])<br/>Some(Other)"| pop262144@{ shape: stop }
    4 -->|"Chars(Line)<br/>Some(Comment)"| pop262144@{ shape: stop }
    0 -->|"Prefix(::)<br/>Some(Comment)"| 5
    5 -->|"Chars(Line)<br/>Some(Comment)"| pop327680@{ shape: stop }
    0 -->|"Prefix(&quot;)<br/>Some(String)"| push1[/"string"/]
    0 -->|"Prefix(%%)<br/>Some(Other)"| pop0@{ shape: stop }
    0 -->|"Prefix(%)<br/>Some(Variable)"| push3[/"variable"/]
    0 -->|"Prefix(!, *, +, /, <, =, >, |)<br/>Some(Operator)"| pop0@{ shape: stop }
    0 -->|"PrefixInsensitive(break, call, cd, chdir, cls, copy, del, dir, echo, exit, for, goto, if, md, mkdir, move, pause, ren, set)<br/>Some(Other)"| 6
    6 -->|"Charset([0-9, A-Z, _, a-z, 0x80-0xFF])<br/>Some(Other)"| pop393216@{ shape: stop }
    6 -->|"Chars(0)<br/>Some(Keyword)"| pop393216@{ shape: stop }
    0 -->|"Charset([0-9])<br/>Some(Number)"| pop0@{ shape: stop }
    0 -->|"Charset([0x00- , #-$, &-), ,-., ;, ?-A, H, J-L, N-O, Q, T-a, h, j-l, n-o, q, t-{, }-0xFF])<br/>None"| pop0@{ shape: stop }
    0 -->|"Chars(1)<br/>None"| pop0@{ shape: stop }
    1 -->|"Prefix(&quot;)<br/>Some(String)"| pop65536@{ shape: stop }
    1 -->|"Prefix(\\)<br/>Some(String)"| push65538[/"string_escape"/]
    1 -->|"Charset([0x00-!, #-[, ]-0xFF])<br/>None"| 1
    1 -->|"Chars(1)<br/>None"| 1
    2 -->|"Chars(1)<br/>Some(String)"| pop131072@{ shape: stop }
    3 -->|"Prefix(%)<br/>Some(Variable)"| pop196608@{ shape: stop }
    3 -->|"Charset([0x00-$, &-0xFF])<br/>None"| 3
    3 -->|"Chars(1)<br/>None"| 3
**/
#[rustfmt::skip]
const LANG_BATCH_CHARSET_0: &[u8; 256] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
#[rustfmt::skip]
const LANG_BATCH_CHARSET_1: &[u8; 256] = &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
#[rustfmt::skip]
const LANG_BATCH_CHARSET_2: &[u8; 256] = &[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
#[rustfmt::skip]
const LANG_BATCH_CHARSET_3: &[u8; 256] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
#[rustfmt::skip]
const LANG_BATCH_CHARSET_4: &[u8; 256] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
#[rustfmt::skip]
const LANG_BATCH_CHARSET_5: &[u8; 256] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
#[rustfmt::skip]
pub const LANG_BATCH: &Language = &Language {
    name: "Batch",
    extensions: &["bat", "cmd"],
    states: &[
        &[
            (PrefixInsensitive(r#"rem"#), Some(Other), Change(4)),
            (Prefix(r#"::"#), Some(Comment), Change(5)),
            (Prefix(r#"""#), Some(String), Push(1)),
            (Prefix(r#"%%"#), Some(Other), Pop),
            (Prefix(r#"%"#), Some(Variable), Push(3)),
            (Prefix(r#"!"#), Some(Operator), Pop),
            (Prefix(r#"*"#), Some(Operator), Pop),
            (Prefix(r#"+"#), Some(Operator), Pop),
            (Prefix(r#"/"#), Some(Operator), Pop),
            (Prefix(r#"<"#), Some(Operator), Pop),
            (Prefix(r#"="#), Some(Operator), Pop),
            (Prefix(r#">"#), Some(Operator), Pop),
            (Prefix(r#"|"#), Some(Operator), Pop),
            (PrefixInsensitive(r#"break"#), Some(Other), Change(6)),
            (PrefixInsensitive(r#"call"#), Some(Other), Change(6)),
            (PrefixInsensitive(r#"cd"#), Some(Other), Change(6)),
            (PrefixInsensitive(r#"chdir"#), Some(Other), Change(6)),
            (PrefixInsensitive(r#"cls"#), Some(Other), Change(6)),
            (PrefixInsensitive(r#"copy"#), Some(Other), Change(6)),
            (PrefixInsensitive(r#"del"#), Some(Other), Change(6)),
            (PrefixInsensitive(r#"dir"#), Some(Other), Change(6)),
            (PrefixInsensitive(r#"echo"#), Some(Other), Change(6)),
            (PrefixInsensitive(r#"exit"#), Some(Other), Change(6)),
            (PrefixInsensitive(r#"for"#), Some(Other), Change(6)),
            (PrefixInsensitive(r#"goto"#), Some(Other), Change(6)),
            (PrefixInsensitive(r#"if"#), Some(Other), Change(6)),
            (PrefixInsensitive(r#"md"#), Some(Other), Change(6)),
            (PrefixInsensitive(r#"mkdir"#), Some(Other), Change(6)),
            (PrefixInsensitive(r#"move"#), Some(Other), Change(6)),
            (PrefixInsensitive(r#"pause"#), Some(Other), Change(6)),
            (PrefixInsensitive(r#"ren"#), Some(Other), Change(6)),
            (PrefixInsensitive(r#"set"#), Some(Other), Change(6)),
            (Charset(LANG_BATCH_CHARSET_2), Some(Number), Pop),
            (Charset(LANG_BATCH_CHARSET_3), None, Pop),
            (Chars(1), None, Pop),
        ],
        &[
            (Prefix(r#"""#), Some(String), Pop),
            (Prefix(r#"\"#), Some(String), Push(2)),
            (Charset(LANG_BATCH_CHARSET_4), None, Change(1)),
            (Chars(1), None, Change(1)),
        ],
        &[
            (Chars(1), Some(String), Pop),
        ],
        &[
            (Prefix(r#"%"#), Some(Variable), Pop),
            (Charset(LANG_BATCH_CHARSET_5), None, Change(3)),
            (Chars(1), None, Change(3)),
        ],
        &[
            (Charset(LANG_BATCH_CHARSET_0), Some(Other), Pop),
            (Chars(usize::MAX), Some(Comment), Pop),
        ],
        &[
            (Chars(usize::MAX), Some(Comment), Pop),
        ],
        &[
            (Charset(LANG_BATCH_CHARSET_1), Some(Other), Pop),
            (Chars(0), Some(Keyword), Pop),
        ],
    ],
};

#[rustfmt::skip]
pub const LANGUAGES: &[&Language] = &[
    LANG_JSON,
    LANG_YAML,
    LANG_BASH,
    LANG_POWERSHELL,
    LANG_BATCH,
];
