// This file is auto-generated by the highlighter-gen tool.
// Do not edit this file directly.

use std::ops::RangeInclusive;

use Action::*;
use HighlightKind::*;
use IndexedColor::*;
use Test::*;

pub struct Language {
    pub name: &'static str,
    pub filenames: &'static [&'static str],
    pub states: &'static [&'static [Transition<'static>]],
}

pub struct Transition<'a> {
    pub test: Test<'a>,
    pub kind: Option<HighlightKind>,
    pub action: Action,
}

pub enum Test<'a> {
    Chars(usize),
    Charset(&'a [u16; 16]),
    Prefix(*const u8),
    PrefixInsensitive(*const u8),
}

#[allow(dead_code)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum IndexedColor {
    Black,
    Red,
    Green,
    Yellow,
    Blue,
    Magenta,
    Cyan,
    White,
    BrightBlack,
    BrightRed,
    BrightGreen,
    BrightYellow,
    BrightBlue,
    BrightMagenta,
    BrightCyan,
    BrightWhite,
}

#[derive(Debug, Default, Clone, Copy, PartialEq, Eq)]
pub enum HighlightKind {
    #[default]
    Other,
    Direct(IndexedColor),
    Comment,
    Number,
    String,
    Variable,
    Operator,
    Keyword,
    Method,
}

pub enum Action {
    Change(u8),
    Push(u8),
    Pop(u8),
}

const fn t<'a>(test: Test<'a>, kind: Option<HighlightKind>, action: Action) -> Transition<'a> {
    Transition { test, kind, action }
}

/**
---
title: Git Commit Message
config:
  layout: elk
---
flowchart TD
    0["0 (ground)"]
    0 -->|"Prefix(#)<br/>Some(Comment)"| push1[/"comment"/]
    0 -->|"Prefix(diff --git)<br/>None"| 5
    5 -->|"Chars(Line)<br/>Some(Direct(BrightBlue))"| push327682[/"diff_transition"/]
    0 -->|"Chars(0)<br/>None"| 4
    4["4 (ignore)"]
    4 -->|"Chars(Line)<br/>None"| pop262144@{ shape: stop }
    1["1 (comment)"]
    1 -->|"Prefix(\\tdeleted:)<br/>None"| 6
    6 -->|"Chars(Line)<br/>Some(Direct(BrightRed))"| pop393216@{ shape: stop }
    1 -->|"Prefix(\\tmodified:)<br/>None"| 7
    7 -->|"Chars(Line)<br/>Some(Direct(BrightBlue))"| pop458752@{ shape: stop }
    1 -->|"Prefix(\\tnew file:)<br/>None"| 8
    8 -->|"Chars(Line)<br/>Some(Direct(BrightGreen))"| pop524288@{ shape: stop }
    1 -->|"Prefix(\\trenamed:)<br/>None"| 9
    9 -->|"Chars(Line)<br/>Some(Direct(BrightBlue))"| pop589824@{ shape: stop }
    1 -->|"Chars(Line)<br/>None"| pop65536@{ shape: stop }
    2["2 (diff_transition)"]
    2 -->|"Chars(0)<br/>Some(Other)"| push131075[/"diff"/]
    3["3 (diff)"]
    3 -->|"Prefix(diff, ---, +++, -, +)<br/>Some(Direct(BrightBlue))"| 4
    3 -->|"Chars(0)<br/>None"| 4
**/
const LANG_GIT_COMMIT_MESSAGE_STRING_0: *const u8 = [1, 0x23].as_ptr();
const LANG_GIT_COMMIT_MESSAGE_STRING_1: *const u8 = [10, 0x64, 0x69, 0x66, 0x66, 0x20, 0x2d, 0x2d, 0x67, 0x69, 0x74].as_ptr();
const LANG_GIT_COMMIT_MESSAGE_STRING_2: *const u8 = [9, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x3a].as_ptr();
const LANG_GIT_COMMIT_MESSAGE_STRING_3: *const u8 = [10, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x3a].as_ptr();
const LANG_GIT_COMMIT_MESSAGE_STRING_4: *const u8 = [10, 0x09, 0x6e, 0x65, 0x77, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x3a].as_ptr();
const LANG_GIT_COMMIT_MESSAGE_STRING_5: *const u8 = [9, 0x09, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x3a].as_ptr();
const LANG_GIT_COMMIT_MESSAGE_STRING_6: *const u8 = [4, 0x64, 0x69, 0x66, 0x66].as_ptr();
const LANG_GIT_COMMIT_MESSAGE_STRING_7: *const u8 = [3, 0x2d, 0x2d, 0x2d].as_ptr();
const LANG_GIT_COMMIT_MESSAGE_STRING_8: *const u8 = [3, 0x2b, 0x2b, 0x2b].as_ptr();
const LANG_GIT_COMMIT_MESSAGE_STRING_9: *const u8 = [1, 0x2d].as_ptr();
const LANG_GIT_COMMIT_MESSAGE_STRING_10: *const u8 = [1, 0x2b].as_ptr();
#[rustfmt::skip]
pub const LANG_GIT_COMMIT_MESSAGE: &Language = &Language {
    name: "Git Commit Message",
    filenames: &["COMMIT_EDITMSG", "MERGE_MSG"],
    states: &[
        &[
            t(Prefix(LANG_GIT_COMMIT_MESSAGE_STRING_0), Some(Comment), Push(1)),
            t(Prefix(LANG_GIT_COMMIT_MESSAGE_STRING_1), None, Change(5)),
            t(Chars(0), None, Change(4)),
        ],
        &[
            t(Prefix(LANG_GIT_COMMIT_MESSAGE_STRING_2), None, Change(6)),
            t(Prefix(LANG_GIT_COMMIT_MESSAGE_STRING_3), None, Change(7)),
            t(Prefix(LANG_GIT_COMMIT_MESSAGE_STRING_4), None, Change(8)),
            t(Prefix(LANG_GIT_COMMIT_MESSAGE_STRING_5), None, Change(9)),
            t(Chars(usize::MAX), None, Pop(1)),
        ],
        &[
            t(Chars(0), Some(Other), Push(3)),
        ],
        &[
            t(Prefix(LANG_GIT_COMMIT_MESSAGE_STRING_6), Some(Direct(BrightBlue)), Change(4)),
            t(Prefix(LANG_GIT_COMMIT_MESSAGE_STRING_7), Some(Direct(BrightBlue)), Change(4)),
            t(Prefix(LANG_GIT_COMMIT_MESSAGE_STRING_8), Some(Direct(BrightBlue)), Change(4)),
            t(Prefix(LANG_GIT_COMMIT_MESSAGE_STRING_9), Some(Direct(BrightRed)), Change(4)),
            t(Prefix(LANG_GIT_COMMIT_MESSAGE_STRING_10), Some(Direct(BrightGreen)), Change(4)),
            t(Chars(0), None, Change(4)),
        ],
        &[
            t(Chars(usize::MAX), None, Pop(0)),
        ],
        &[
            t(Chars(usize::MAX), Some(Direct(BrightBlue)), Push(2)),
        ],
        &[
            t(Chars(usize::MAX), Some(Direct(BrightRed)), Pop(1)),
        ],
        &[
            t(Chars(usize::MAX), Some(Direct(BrightBlue)), Pop(1)),
        ],
        &[
            t(Chars(usize::MAX), Some(Direct(BrightGreen)), Pop(1)),
        ],
        &[
            t(Chars(usize::MAX), Some(Direct(BrightBlue)), Pop(1)),
        ],
    ],
};

/**
---
title: Git Rebase Message
config:
  layout: elk
---
flowchart TD
    0["0 (ground)"]
    0 -->|"Prefix(break, drop, edit, exec, fixup, pick, reword, squash, b, d, e, f, p, r, s, x)<br/>Some(Keyword)"| pop0@{ shape: stop }
    0 -->|"Chars(Line)<br/>Some(Comment)"| pop0@{ shape: stop }
    1["1 (hash)"]
    1 -->|"Charset([0x00-0x08, 0x0E-0x1F, !-0xFF])<br/>Some(Variable)"| pop65536@{ shape: stop }
    1 -->|"Chars(0)<br/>None"| pop65536@{ shape: stop }
**/
#[rustfmt::skip]
const LANG_GIT_REBASE_MESSAGE_CHARSET_0: &[u16; 16] = &[0xfffb, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xfffe, 0xffff, 0xffff];
const LANG_GIT_REBASE_MESSAGE_STRING_0: *const u8 = [5, 0x62, 0x72, 0x65, 0x61, 0x6b].as_ptr();
const LANG_GIT_REBASE_MESSAGE_STRING_1: *const u8 = [4, 0x64, 0x72, 0x6f, 0x70].as_ptr();
const LANG_GIT_REBASE_MESSAGE_STRING_2: *const u8 = [4, 0x65, 0x64, 0x69, 0x74].as_ptr();
const LANG_GIT_REBASE_MESSAGE_STRING_3: *const u8 = [4, 0x65, 0x78, 0x65, 0x63].as_ptr();
const LANG_GIT_REBASE_MESSAGE_STRING_4: *const u8 = [5, 0x66, 0x69, 0x78, 0x75, 0x70].as_ptr();
const LANG_GIT_REBASE_MESSAGE_STRING_5: *const u8 = [4, 0x70, 0x69, 0x63, 0x6b].as_ptr();
const LANG_GIT_REBASE_MESSAGE_STRING_6: *const u8 = [6, 0x72, 0x65, 0x77, 0x6f, 0x72, 0x64].as_ptr();
const LANG_GIT_REBASE_MESSAGE_STRING_7: *const u8 = [6, 0x73, 0x71, 0x75, 0x61, 0x73, 0x68].as_ptr();
const LANG_GIT_REBASE_MESSAGE_STRING_8: *const u8 = [1, 0x62].as_ptr();
const LANG_GIT_REBASE_MESSAGE_STRING_9: *const u8 = [1, 0x64].as_ptr();
const LANG_GIT_REBASE_MESSAGE_STRING_10: *const u8 = [1, 0x65].as_ptr();
const LANG_GIT_REBASE_MESSAGE_STRING_11: *const u8 = [1, 0x66].as_ptr();
const LANG_GIT_REBASE_MESSAGE_STRING_12: *const u8 = [1, 0x70].as_ptr();
const LANG_GIT_REBASE_MESSAGE_STRING_13: *const u8 = [1, 0x72].as_ptr();
const LANG_GIT_REBASE_MESSAGE_STRING_14: *const u8 = [1, 0x73].as_ptr();
const LANG_GIT_REBASE_MESSAGE_STRING_15: *const u8 = [1, 0x78].as_ptr();
#[rustfmt::skip]
pub const LANG_GIT_REBASE_MESSAGE: &Language = &Language {
    name: "Git Rebase Message",
    filenames: &["git-rebase-todo"],
    states: &[
        &[
            t(Prefix(LANG_GIT_REBASE_MESSAGE_STRING_0), Some(Keyword), Pop(0)),
            t(Prefix(LANG_GIT_REBASE_MESSAGE_STRING_1), Some(Keyword), Pop(0)),
            t(Prefix(LANG_GIT_REBASE_MESSAGE_STRING_2), Some(Keyword), Pop(0)),
            t(Prefix(LANG_GIT_REBASE_MESSAGE_STRING_3), Some(Keyword), Pop(0)),
            t(Prefix(LANG_GIT_REBASE_MESSAGE_STRING_4), Some(Keyword), Pop(0)),
            t(Prefix(LANG_GIT_REBASE_MESSAGE_STRING_5), Some(Keyword), Pop(0)),
            t(Prefix(LANG_GIT_REBASE_MESSAGE_STRING_6), Some(Keyword), Pop(0)),
            t(Prefix(LANG_GIT_REBASE_MESSAGE_STRING_7), Some(Keyword), Pop(0)),
            t(Prefix(LANG_GIT_REBASE_MESSAGE_STRING_8), Some(Keyword), Pop(0)),
            t(Prefix(LANG_GIT_REBASE_MESSAGE_STRING_9), Some(Keyword), Pop(0)),
            t(Prefix(LANG_GIT_REBASE_MESSAGE_STRING_10), Some(Keyword), Pop(0)),
            t(Prefix(LANG_GIT_REBASE_MESSAGE_STRING_11), Some(Keyword), Pop(0)),
            t(Prefix(LANG_GIT_REBASE_MESSAGE_STRING_12), Some(Keyword), Pop(0)),
            t(Prefix(LANG_GIT_REBASE_MESSAGE_STRING_13), Some(Keyword), Pop(0)),
            t(Prefix(LANG_GIT_REBASE_MESSAGE_STRING_14), Some(Keyword), Pop(0)),
            t(Prefix(LANG_GIT_REBASE_MESSAGE_STRING_15), Some(Keyword), Pop(0)),
            t(Chars(usize::MAX), Some(Comment), Pop(0)),
        ],
        &[
            t(Charset(LANG_GIT_REBASE_MESSAGE_CHARSET_0), Some(Variable), Pop(1)),
            t(Chars(0), None, Pop(1)),
        ],
    ],
};

#[rustfmt::skip]
pub const LANGUAGES: &[&Language] = &[
    LANG_GIT_COMMIT_MESSAGE,
    LANG_GIT_REBASE_MESSAGE,
];
